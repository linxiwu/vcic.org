{"version":3,"sources":["App.js","spreadsheet.js","serviceWorker.js","index.js"],"names":["sheetId","initSheet","a","doc","GoogleSpreadsheet","useServiceAccountAuth","require","loadInfo","getTitle","title","getJudgeRows","sheet","sheetsByIndex","getRows","rows","getJudges","judgeArray","i","length","Judges","console","log","push","getParticipantCols","loadCells","cols","cell","getCell","value","getParticipants","participantsArray","vote","judgeName","round","first","second","third","error","hit","row","rowNumber","j","participant","col1","columnIndex","col2","col3","range","index","saveUpdatedCells","section","App","state","thisJudge","judges","participants","page","url","URL","window","location","href","searchParams","get","this","setState","spreadsheet","listJudges","map","judge","formPart1","formPart2","formPart3","id","formPart","class","element","Fragment","type","name","onClick","event","preventDefault","history","back","size","endPage","className","color","Component","for","SubmitButton","props","handleClick","submit","parent","document","getElementById","React","form","alert","pathname","assign","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.04202b59.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport * as spreadsheet from \"./spreadsheet\";\r\n\r\nvar sheetId;\r\n\r\nvar section = <div></div>;\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { sheetId: \"\", thisJudge: \"\", title: \"\", judges: [], participants: [], page: 'judges'};\r\n  }\r\n\r\n  // Loading the Page\r\n  async componentDidMount() {\r\n    var url = new URL(window.location.href);\r\n    \r\n    if (url.searchParams.get('sheetId')) {\r\n      sheetId = url.searchParams.get('sheetId');\r\n      if (url.searchParams.get('judge')) {\r\n        this.setState({'thisJudge': url.searchParams.get('judge')});\r\n      }\r\n      const title = await spreadsheet.getTitle(sheetId);\r\n      this.setState({'title': title});\r\n      var judges = [];\r\n      if (!url.searchParams.get('vote')) {\r\n        judges = await spreadsheet.getJudges(sheetId);\r\n      }\r\n      this.setState({'judges': judges});\r\n      var participants = [];\r\n      if (url.searchParams.get('vote')) {\r\n        participants = await spreadsheet.getParticipants(sheetId);\r\n      }\r\n      this.setState({ 'participants': participants});\r\n\r\n      if (url.searchParams.get('vote')) {\r\n        this.setState({ 'page': 'voting'});\r\n      }\r\n\r\n    } else if (url.searchParams.get('thanks')) {\r\n      this.setState({ 'page': 'thanks'});\r\n    } else {\r\n      this.setState({ 'page': 'default'});\r\n    }\r\n    \r\n  }\r\n\r\n  // Rendering the Page\r\n  render() {\r\n    const listURL = this.state.judges.map((judge) =>\r\n      [`./?sheetId=${sheetId}&judge=${judge}&vote=true`,judge]\r\n    );\r\n\r\n    const listJudges = listURL.map((url) =>\r\n      <li><a href={url[0]}>{url[1]}</a></li>\r\n    );\r\n\r\n    function handleBack(event) {\r\n      event.preventDefault();\r\n      window.history.back();\r\n    }\r\n\r\n    // Various Parts of the form, conditional on what the current page is\r\n    var formPart1 = <div></div>;\r\n    var formPart2 = <div></div>;\r\n    var formPart3 = <div></div>;\r\n    if (this.state.page === 'voting') {\r\n      section = <form id='form'></form>;\r\n      formPart1 = formPart;\r\n      formPart2 = generateTable(this.state.participants);\r\n      formPart3 = <SubmitButton value={this.state.thisJudge}/>;\r\n      section = <div>{formPart1}{formPart2}{formPart3}</div>;\r\n    } else if (this.state.page === 'judges') {\r\n      section = <ul>{listJudges}</ul>;\r\n    } else {\r\n      if (this.state.page == 'thanks') {\r\n        section = <div><p>Thanks for voting!</p><p><button onClick={handleBack}><font size=\"5\">Vote again</font></button></p><br/><br/>{endPage}</div>;\r\n      } else {\r\n        section = <div>{endPage}</div>;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\" color=\"#f5f5f5\">\r\n        <header className=\"App-header\">\r\n          <h1 className=\"App-title\">{this.state.title}</h1>\r\n          <div><form id='form'>{section}</form></div>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Outside constant for creating the round selection part of the form\r\nconst formPart = \r\n  <React.Fragment>\r\n        <p> Round: </p>\r\n        <table> <tr>\r\n          <td class=\"td3\"><input type=\"radio\" id =\"Due Diligence\" name=\"round\" value=\"Due Diligence\" />\r\n          <label for=\"Due Diligence\">Due Diligence</label></td>\r\n          <td class=\"td3\"><input type=\"radio\" id =\"Written Deliverables\" name=\"round\" value=\"Written Deliverables\" />\r\n          <label for=\"Written Deliverables\">Written Deliverables</label></td>\r\n          <td class=\"td3\"><input type=\"radio\" id =\"Partner Meeting\" name=\"round\" value=\"Partner Meeting\" />\r\n          <label for=\"Partner Meeting\">Partner Meeting</label></td>\r\n        </tr></table>\r\n        <p> Vote: </p>\r\n        <p> Indicate your choices for First, Second, and Third places.</p>\r\n  </React.Fragment>\r\n\r\n// Outside constant for the end page\r\nvar endPage = \r\n  <React.Fragment>\r\n    <div>\r\n        <p><a href=\"https://www.vcic.org/\">Back to events top</a></p>\r\n    </div>\r\n  </React.Fragment>\r\n\r\n// Outside class for the submit button\r\nclass SubmitButton extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        parent: document.getElementById('form')\r\n    };\r\n  }\r\n\r\n  handleClick = async () => {\r\n    submit(this.state.parent, this.props.value, sheetId);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <button type=\"button\" onClick={this.handleClick}>\r\n          <font size=\"5\">Submit</font>\r\n        </button>\r\n    )\r\n  }\r\n}\r\n\r\n// Generating the rows of radio buttons\r\nfunction generateRadioButtons(participant) {\r\n  return (\r\n    <React.Fragment>\r\n      <tr>\r\n      <td>{participant}</td>\r\n      <td class=\"td2\"></td>\r\n      <td><input type=\"radio\" id ={participant + ' 1'} name={'1button'} value={participant} /></td>\r\n      <td class=\"td2\"></td>\r\n      <td><input type=\"radio\" id ={participant + ' 2'} name={'2button'} value={participant} /></td>\r\n      <td class=\"td2\"></td>\r\n      <td><input type=\"radio\" id ={participant + ' 3'} name={'3button'} value={participant} /></td>\r\n      </tr>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\n// Actually submitting the results to the google form; if any team is selected twice or more it does not submit\r\nasync function submit(form, judge, sheet) {\r\n  if(form['1button'].value === \"\" || form['2button'].value === \"\" || form['3button'].value === \"\") {\r\n    alert('Please select a team for each place');\r\n  } else if (form['1button'].value === form['2button'].value || form['2button'].value === form['3button'].value || form['1button'].value === form['3button'].value ){\r\n    alert('Please do not select a team more than once');\r\n  } else if (form['round'].value === \"\") {\r\n    alert('You must select a round');\r\n  } else {\r\n    //console.log(sheet, judge, form['round'].value, form['1button'].value,form['2button'].value, form['3button'].value );\r\n    if (await spreadsheet.vote(sheetId,judge,form['round'].value,form['1button'].value,form['2button'].value, form['3button'].value)) {\r\n      var page = window.location.pathname;\r\n      page += \"?thanks=true\"\r\n      window.location.assign(page);\r\n    }\r\n  }\r\n}\r\n\r\n// Outside function for generating tables\r\nfunction generateTable(participants) {\r\n  return (\r\n  <table>\r\n    <tr>\r\n      <th>Team</th><th class=\"th2\"></th><th>First</th><th class=\"th2\"></th><th>Second</th><th class=\"th2\"></th><th>Third</th>\r\n    </tr>\r\n    {participants.map(element => generateRadioButtons(element))}\r\n  </table>);\r\n}\r\n\r\nexport default App;\r\n\r\n","import { GoogleSpreadsheet } from 'google-spreadsheet';\r\n\r\n//Test SheetId 194iz66ka28ejiDV6_iHtGyV7V6gK8QSl9eFb8cMC1IM\r\n//Example url: http://localhost:3000?sheetId=194iz66ka28ejiDV6_iHtGyV7V6gK8QSl9eFb8cMC1IM\r\n\r\n/* Resources used to access Google Spreadsheet */\r\n//https://github.com/theoephraim/node-google-spreadsheet\r\n\r\n/* Resources used to integrate Google Spreadsheet with React */\r\n//https://dev.to/calvinpak/how-to-read-write-google-sheets-with-react-193l\r\n\r\n\r\n/* Initialize the Google Sheet. This is required before any data can be accessed.\r\n * Input: sheetId for the Google Sheet\r\n * Output: doc object. This holds all of the sheet information. */\r\nasync function initSheet(sheetId) {\r\n    var doc = new GoogleSpreadsheet(sheetId);\r\n\r\n    //Make sure creds.json is up-to-date before using this!\r\n    await doc.useServiceAccountAuth(require('./creds.json'));\r\n\r\n    await doc.loadInfo();\r\n    return doc;\r\n}\r\n\r\n/* Get the title of a Google Sheet.\r\n * Input: sheetId for the Google Sheet\r\n * Output: string. This is the Sheet Title. */\r\nexport async function getTitle(sheetId) {\r\n    var doc = await initSheet(sheetId);\r\n    return doc.title;\r\n}\r\n\r\n/* Get each row that contains a judge.\r\n * Input: doc object\r\n * Output: row object. This contains the row information. */\r\nasync function getJudgeRows(doc) {\r\n    var sheet = doc.sheetsByIndex[0];\r\n    var rows = await sheet.getRows();\r\n    return rows;\r\n}\r\n\r\n/* Get each judge's name.\r\n * Input: sheetId for the Google Sheet\r\n * Output: array of strings */\r\nexport async function getJudges(sheetId) {\r\n    var doc = await initSheet(sheetId);\r\n    var rows = await getJudgeRows(doc);\r\n\r\n    var judgeArray = []\r\n    for (var i = 1; i < rows.length; i++) {\r\n        if (rows[i].Judges && !(rows[i].Judges in judgeArray)) {\r\n            console.log(rows[i].Judges);\r\n            judgeArray.push(rows[i].Judges);\r\n        }\r\n    }\r\n    return judgeArray;\r\n\r\n}\r\n\r\n/* Get each column that contains a participant.\r\n * Input: doc object\r\n * Output: array of cell objects. This contains the cell information. */\r\nasync function getParticipantCols(doc) {\r\n    var sheet = doc.sheetsByIndex[0];\r\n    await sheet.loadCells('C2:Z2');\r\n    var cols = []\r\n    for (var i = 2; i < 24; i++) {\r\n        var cell = sheet.getCell(1,i);\r\n        var participant = cell.value;\r\n        if (participant !== null) {\r\n            cols.push(cell);\r\n        }\r\n    }\r\n    return cols;\r\n}\r\n\r\n/* Get each participant's name.\r\n * Input: sheetId for the Google Sheet\r\n * Output: array of strings */\r\nexport async function getParticipants(sheetId) {\r\n    var doc = await initSheet(sheetId);\r\n    var cols = await getParticipantCols(doc);\r\n\r\n    var participantsArray = []\r\n    for (var i = 0; i < cols.length; i++) {\r\n        participantsArray.push(cols[i].value);\r\n    }\r\n    return participantsArray;\r\n}\r\n\r\n/* Vote for 1st, 2nd, and 3rd place.\r\n * Input: \r\n    * sheetId for the Google Sheet\r\n    * Judge Name\r\n    * Round name\r\n    * 1st Place participant \r\n    * 2nd Place participant\r\n    * 3rd Place participant\r\n * Output: boolean indicating success or failure */\r\nexport async function vote(sheetId, judgeName, round, first, second, third) {\r\n    if (first == second || second == third || first == third) {\r\n        console.error(\"Do not vote for a team multiple times\");\r\n        return false;\r\n    }\r\n    if (!round || (round != \"Due Diligence\" && round != \"Written Deliverables\" && round != \"Partner Meeting\")) {\r\n        console.error(\"Invalid round\");\r\n        return false;\r\n    }\r\n    var doc = await initSheet(sheetId);\r\n    var rows = await getJudgeRows(doc);\r\n    var cols = await getParticipantCols(doc);\r\n\r\n    var row;\r\n    var hit = 0;\r\n    for (var i in rows) {\r\n        if (rows[i].Judges == judgeName) {\r\n            hit = 1;\r\n            row = rows[i].rowNumber-1;\r\n        }\r\n    }\r\n    if (round == \"Due Diligence\") {\r\n        row = row + 0;\r\n    } else if (round == \"Written Deliverables\") {\r\n        row = row + 1;\r\n    } else if (round == \"Partner Meeting\") {\r\n        row = row + 2;\r\n    }\r\n\r\n    if (hit !== 1) {\r\n        console.error(\"Invalid Judge\");\r\n        return false;\r\n    }\r\n\r\n    var col1;\r\n    var col2;\r\n    var col3;\r\n    hit = 0;\r\n    for (var j = 0; j < cols.length; j++) {\r\n        var cell = cols[j];\r\n        var participant = cell.value;\r\n        if (participant == first) {\r\n            hit++;\r\n            col1 = cell.columnIndex;\r\n        } else if (participant == second) {\r\n            hit++;\r\n            col2 = cell.columnIndex;\r\n        } else if (participant == third) {\r\n            hit++;\r\n            col3 = cell.columnIndex;\r\n        }\r\n    }\r\n    if (hit !== 3) {\r\n        console.error(\"Invalid Participant\");\r\n        return false;\r\n    }\r\n\r\n    \r\n    var sheet = doc.sheetsByIndex[0];\r\n    var range = 'A'+row-+':Z'+row;\r\n    await sheet.loadCells(range);\r\n    sheet.getCell(row,1).value = round;\r\n\r\n    for (j = 0; j < cols.length; j++) {\r\n        var index = j+2;\r\n        if (index == col1) {\r\n            hit++;\r\n            sheet.getCell(row,col1).value = \"#1\";\r\n        } else if (index == col2) {\r\n            hit++;\r\n            sheet.getCell(row,col2).value = \"#2\";\r\n        } else if (index == col3) {\r\n            hit++;\r\n            sheet.getCell(row,col3).value = \"#3\";\r\n        } else {\r\n            sheet.getCell(row,index).value = \"\";\r\n        }\r\n    }\r\n    await sheet.saveUpdatedCells();\r\n    return true;\r\n\r\n\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}